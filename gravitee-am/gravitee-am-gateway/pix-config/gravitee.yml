# Gateway HTTP server
http:
   port: ${PORT}

# Management repository is used to store global configuration such as domains, clients, ...
# This is the default configuration using MongoDB (single server)
# For more information about MongoDB configuration, please have a look to:
# - http://api.mongodb.org/java/current/com/mongodb/MongoClientOptions.html
management:
  type: mongodb
  mongodb:
    uri: DEFAULT

# AM Gateway service configurations. Provided values are default values.
# All services are enabled by default. To stop one of them, you have to add the property 'enabled: false' (See the
# 'local' service for an example).
services:
  core:
    http:
      enabled: true
      port: 18092
      host: localhost
      authentication:
        # authentication type to be used for the core services
        # - none : to disable authentication
        # - basic : to use basic authentication
        # default is "basic"
        type: basic
        users:
          admin: ${internal-http-api-password}

  # Metrics service
  metrics:
    enabled: false
    prometheus:
      enabled: true

  # Gateway monitoring service.
  # This service retrieves metrics like os / process / jvm metrics.
  monitoring:
    delay: 5000
    unit: MILLISECONDS

# OAuth2 repository is used to store OAuth2 tokens: access_token, refresh_token
oauth2:
  type: mongodb
  mongodb:
    dbname: ${ds.mongodb.dbname}
    host: ${ds.mongodb.host}
    port: ${ds.mongodb.port}
#    ensureIndexOnStart: true

# SMTP configuration used to send mails
email:
  enabled: false
  host: DEFAULT
  subject: "[Gravitee.io] %s"
  port: 587
  from: DEFAULT
  username: DEFAULT
#  properties:
#    auth: true
#    starttls.enable: true
#    ssl.trust: smtp.gmail.com

# Mail templates
#templates:
#  path: ${gravitee.home}/templates

# User management configuration
user:
  email:
    policy:
      pattern: ^[a-zA-Z0-9_+-]+(?:\.[a-zA-Z0-9_+-]+)*@(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,7}$
  # Password complexity validation policy
  # Applications should enforce password complexity rules to discourage easy to guess passwords.
  # Passwords should require a minimum level of complexity that makes sense for the application and its user population.
  password:
    policy:
      # Regex pattern for password validation (default to OWASP recommendations).
      # 8 to 32 characters, no more than 2 consecutive equal characters, min 1 special characters (@ & # ...), min 1 upper case character.
      pattern: ^(?:(?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))(?!.*(.)\1{2,})[A-Za-z0-9!~<>,;:_\-=?*+#."'&§`£€%°()\\\|\[\]\-\$\^\@\/]{8,32}$
        # Example : ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\S+$).{8,}$
        # ^                # start-of-string
        #(?=.*[0-9])       # a digit must occur at least once
        #(?=.*[a-z])       # a lower case letter must occur at least once
        #(?=.*[A-Z])       # an upper case letter must occur at least once
        #(?=.*[@#$%^&+=])  # a special character must occur at least once
        #(?=\S+$)          # no whitespace allowed in the entire string
        #.{8,}             # anything, at least eight places though
        #$                 # end-of-string

      ## Password dictionary to exclude most commons passwords
      ## You need to enable the feature in the AM management console

      #dictionary:
      #  filename: /path/to/dictionary  # if null `resources/dictionaries/10k-most-common.txt` will be loaded
      #  watch: true #if true, watches periodically for any changes in the file
  name:
    strict:
      policy:
        pattern: ^[^±!@£$%^&*_+§¡€#¢¶•ªº«»\\/<>?:;|=.,]{0,100}$
    lax:
      policy:
        pattern: ^[^±!£$%^&*§¡€¢¶•ªº«»\\/<>?|=]{0,100}$
  username:
    policy:
      pattern: ^[^±!£$%^&*§¡€¢¶•ªº«»\\/<>?:;|=,]{1,100}$

  registration:
    email:
      #subject: New user registration
    token:
      #expire-after: 86400 # the end of validity of the token in seconds for registration email (default 86400 = a day)
  resetPassword:
    email:
      #subject: Please reset your password
    token:
      #expire-after: 300 # the end of validity of the token in seconds for reset password email (default 300 = 5 minutes)
  blockedAccount:
      email:
      #subject: Account has been locked
      token:
      #expire-after: 86400 # the end of validity of the token in seconds for blocked account email (default 86400 = a day)
  mfaChallenge:
      email:
      #subject: Verification Code
      token:
      #expire-after: 300 # the end of validity of the token in seconds for MFA email (default 300 = 5 minutes)

handlers:
  request:
    transaction:
      header: X-Gravitee-Transaction-Id

# Gateway entry point used in emails
gateway:
  url: http://localhost:8092

# Referenced properties
ds:
  mongodb:
    dbname: ${MONGO_DB_NAME}
    host: ${MONGO_DB_HOST}
    port: ${MONGO_DB_PORT}
    username: ${MONGO_DB_USER}
    password: ${MONGO_DB_USERNAME}

# For AM GATEWAY, liquibase updates are disabled by default.
liquibase:
  enabled: false